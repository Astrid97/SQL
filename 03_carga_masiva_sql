-- CARGA MASIVA DE REGISTROS
-- paso 1 
USE vet;

DROP VIEW IF EXISTS v_raza_con_especie;
CREATE VIEW v_raza_con_especie AS
SELECT  r.id     AS id_raza,
        e.id     AS id_especie,
        e.nombre AS especie_txt,
        r.nombre AS raza_txt
FROM raza r
JOIN especie e ON e.id = r.especie_id;

-- paso 2

CREATE TEMPORARY TABLE seq200k AS
SELECT ROW_NUMBER() OVER () AS n
FROM
  (SELECT 0 u UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
   UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d0
CROSS JOIN
  (SELECT 0 u UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
   UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d1
CROSS JOIN
  (SELECT 0 u UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
   UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d2
CROSS JOIN
  (SELECT 0 u UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
   UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d3
CROSS JOIN
  (SELECT 0 u UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
   UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d4
CROSS JOIN
  (SELECT 0 u UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
   UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d5
LIMIT 200000;


-- paso 3 
SET @tag   := 'CAAT1';
SET @sedes := (SELECT COUNT(*) FROM veterinaria_cat);

INSERT INTO microchip (eliminado, codigo, fecha_implantacion, veterinaria, observaciones)
SELECT
  0,
  CONCAT('CHIP-', @tag, '-', LPAD(n, 6, '0'))                              AS codigo, -- único

  -- fecha_implantacion: nunca antes del nacimiento +60d, nunca futura
  LEAST(
   CURDATE(),  -- tope superior: hoy (evita futuro)
   DATE_ADD(
     DATE_ADD(DATE_SUB(CURDATE(), INTERVAL 3650 DAY), INTERVAL MOD(n, 3650) DAY),
     INTERVAL (60 + MOD(n, 200)) DAY  -- al menos 60 días de edad; agrega variación
   )
 ) AS fecha_implantacion,

  (SELECT nombre FROM veterinaria_cat WHERE id = 1 + MOD(n-1, @sedes))     AS veterinaria, -- reparte sedes
  CASE WHEN MOD(n, 200)=0 THEN CONCAT('Control masivo', n) END             AS observaciones -- cada 200, nota
FROM seq200k;

SET @tag = CONVERT(@tag USING utf8);

-- paso 4 
CREATE TEMPORARY TABLE chips200k AS
SELECT id, codigo, ROW_NUMBER() OVER (ORDER BY id) AS rn
FROM microchip
WHERE codigo LIKE CONCAT('CHIP-', @tag, '-%')
ORDER BY id;


-- paso 5
SET @cant_mnames  := (SELECT COUNT(*) FROM cat_nombre_mascota);  -- nombres de mascotas
SET @cant_nombres := (SELECT COUNT(*) FROM cat_nombre);           -- nombres de personas (dueño)
SET @cant_razas   := (SELECT COUNT(*) FROM v_raza_con_especie); -- pares especie-raza en texto


-- paso 6 
INSERT INTO mascota (eliminado, nombre, especie, raza, fecha_nacimiento, duenio, microchip_id)
SELECT
  0,

-- nombre de la mascota
  (SELECT nombre FROM cat_nombre_mascota
     WHERE id = 1 + MOD(c.rn-1, @cant_mnames))                              AS nombre_mascota,

  -- especie/raza en texto (coherente con el catálogo)
  (SELECT especie_txt FROM v_raza_con_especie
     WHERE id_raza = 1 + MOD(c.rn-1, @cant_razas))                           AS especie_txt,
  (SELECT raza_txt FROM v_raza_con_especie
     WHERE id_raza = 1 + MOD(c.rn-1, @cant_razas))                           AS raza_txt,

-- fecha nacimiento no futura (respeta trigger)
DATE_ADD(DATE_SUB(CURDATE(), INTERVAL 3650 DAY), INTERVAL MOD(c.rn, 3650) DAY) AS fecha_nacimiento,
  
-- dueño como string (nombre de persona + sufijo numerico)
  CONCAT(
    (SELECT nombre FROM cat_nombre WHERE id = 1 + MOD(c.rn, @cant_nombres)),
    ' ',
    'Apellido', LPAD(c.rn, 6, '0')
  )                                                                          AS duenio_str,

-- vinculo 1-1 con microchip (clave)
  c.id                                                                        AS microchip_id 
FROM chips200k c;
